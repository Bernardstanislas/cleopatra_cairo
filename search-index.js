var searchIndex = JSON.parse('{\
"cairo_rs":{"doc":"","t":[14,14,14,0,0,0,14,0,0,0,0,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,5,5,5,5,5,12,3,3,3,11,12,11,11,11,11,11,11,12,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,5,5,5,5,17,5,5,5,5,5,5,5,13,3,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,17,17,17,17,17,17,17,17,17,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,3,12,11,11,12,11,11,10,12,11,10,11,11,12,12,11,11,11,12,12,12,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,3,3,3,3,3,3,3,3,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,13,13,13,4,11,11,11,11,11,11,11,5,5,11,11,11,11,11,12,12,12,0,0,0,0,0,0,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,4,13,13,13,13,13,4,13,3,13,13,13,13,13,13,13,4,4,4,4,13,13,13,4,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,11,12,12,11,12,12,11,12,11,12,12,11,11,11,11,11,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,5,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,0,0,0,0,0,0,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,3,8,3,3,3,3,12,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,0,3,3,12,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,5,11,11,11,11,11,11,11,11,11,3,3,3,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,12,3,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,12,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11],"n":["any_box","bigint","bigint_str","cairo_run","hint_processor","math_utils","relocatable","serde","types","utils","vm","cairo_run","write_binary_memory","write_binary_trace","write_output","builtin_hint_processor","hint_processor_definition","hint_processor_utils","blake2s_hash","blake2s_utils","builtin_hint_processor_definition","cairo_keccak","dict_hint_utils","dict_manager","find_element_hint","hint_code","hint_utils","keccak_utils","math_utils","memcpy_hint_utils","memset_utils","pow_utils","secp","set","sha256_utils","squash_dict_utils","uint256_utils","usort","IV","blake2s_compress","blake2s_add_uint256","blake2s_add_uint256_bigend","compute_blake2s","finalize_blake2s","0","BuiltinHintProcessor","HintFunc","HintProcessorData","add_hint","ap_tracking","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","code","compile_hint","execute_hint","extra_hints","from","from","from","ids_data","into","into","into","new","new_default","new_empty","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","keccak_hints","block_permutation","cairo_keccak_finalize","compare_bytes_in_word_nondet","compare_keccak_full_rate_in_bytes_nondet","keccak_write_args","DICT_ACCESS_SIZE","default_dict_new","dict_new","dict_read","dict_squash_copy_dict","dict_squash_update_ptr","dict_update","dict_write","DefaultDictionary","DictManager","DictTracker","Dictionary","SimpleDictionary","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","current_ptr","data","default","eq","eq","eq","fmt","fmt","fmt","from","from","from","get_dictionary_copy","get_tracker","get_tracker_mut","get_value","insert_value","into","into","into","new","new_default_dict","new_default_dict","new_dict","new_empty","new_with_initial","to_owned","to_owned","to_owned","trackers","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","0","default_value","dict","find_element","search_sorted_lower","get_address_from_var_name","get_integer_from_var_name","get_ptr_from_var_name","get_reference_from_var_name","get_relocatable_from_var_name","insert_value_from_var_name","insert_value_into_ap","unsafe_keccak","unsafe_keccak_finalize","assert_250_bit","assert_le_felt","assert_lt_felt","assert_nn","assert_not_equal","assert_not_zero","is_le_felt","is_nn","is_nn_out_of_range","is_positive","signed_div_rem","split_felt","split_int","split_int_assert_range","sqrt","unsigned_div_rem","add_segment","enter_scope","exit_scope","memcpy_continue_copying","memcpy_enter_scope","memset_continue_loop","memset_enter_scope","pow","bigint_utils","ec_utils","field_utils","secp_utils","signature","bigint_to_uint256","nondet_bigint3","compute_doubling_slope","compute_slope","ec_double_assign_new_x","ec_double_assign_new_y","ec_mul_inner","ec_negate","fast_ec_add_assign_new_x","fast_ec_add_assign_new_y","is_zero_assign_scope_variables","is_zero_nondet","is_zero_pack","reduce","verify_zero","BASE_86","BETA","N0","N1","N2","P0","P1","P2","SECP_REM","pack","pack_from_relocatable","pack_from_var_name","split","div_mod_n_packed_divmod","div_mod_n_safe_div","get_point_from_x","set_add","sha256_finalize","sha256_input","sha256_main","squash_dict","squash_dict_inner_assert_len_keys","squash_dict_inner_check_access_index","squash_dict_inner_continue_loop","squash_dict_inner_first_iteration","squash_dict_inner_len_assert","squash_dict_inner_next_key","squash_dict_inner_skip_loop","squash_dict_inner_used_accesses_assert","split_64","uint256_add","uint256_signed_nn","uint256_sqrt","uint256_unsigned_div_rem","usort_body","usort_enter_scope","verify_multiplicity_assert","verify_multiplicity_body","verify_usort","HintProcessor","HintReference","ap_tracking_data","borrow","borrow_mut","cairo_type","clone","clone_into","compile_hint","dereference","eq","execute_hint","fmt","from","immediate","inner_dereference","into","new","new_simple","offset1","offset2","register","to_owned","try_from","try_into","type_id","vzip","bigint_to_u32","bigint_to_usize","compute_addr_from_reference","get_integer_from_reference","get_ptr_from_reference","insert_value_from_reference","as_int","div_mod","ec_add","ec_double","ec_double_slope","isqrt","line_slope","safe_div","deserialize_program","deserialize_utils","ApTracking","FlowTrackingData","HintParams","Identifier","Member","ProgramJson","Reference","ReferenceManager","ValueAddress","accessible_scopes","ap_tracking","ap_tracking_data","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builtins","cairo_type","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","code","data","default","dereference","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_array_of_bigint_hex","deserialize_bigint_hex","deserialize_map_to_string_and_usize_hashmap","deserialize_program","deserialize_program_json","deserialize_value_address","eq","eq","eq","eq","eq","eq","eq","eq","flow_tracking_data","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","full_name","group","hints","identifiers","immediate","inner_dereference","into","into","into","into","into","into","into","into","into","members","new","no_hint_reference_default","offset","offset","offset1","offset2","pc","pc","prime","reference_ids","reference_manager","references","register","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_address","value_type","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","BigIntError","IntError","InvalidStringError","ReferenceParseError","borrow","borrow_mut","eq","fmt","fmt","from","into","maybe_add_padding","parse_value","to_string","try_from","try_into","type_id","vzip","0","0","0","errors","exec_scope","instruction","program","relocatable","program_errors","ConstWithoutValue","EntrypointNotFound","IO","Parse","ProgramError","borrow","borrow_mut","fmt","fmt","from","from","from","into","provide","source","to_string","try_from","try_into","type_id","vzip","0","0","0","0","ExecutionScopes","assign_or_update_variable","borrow","borrow_mut","data","default","delete_variable","enter_scope","exit_scope","from","get_any_boxed_mut","get_any_boxed_ref","get_dict_manager","get_int","get_int_ref","get_list","get_list_ref","get_listu64","get_listu64_ref","get_local_variables","get_local_variables_mut","get_mut_dict_int_list_u64_ref","get_mut_int_ref","get_mut_list_ref","get_mut_listu64_ref","get_mut_u64_ref","get_u64","get_u64_ref","insert_box","insert_value","into","new","try_from","try_into","type_id","vzip","AP","AP","APPlus2","Add","Add","Add1","Add2","ApUpdate","AssertEq","Call","Dst","FP","FP","FpUpdate","Imm","Instruction","Jnz","Jump","JumpRel","Mul","NOp","Op0","Op1","Op1Addr","Opcode","PcUpdate","Register","Regular","Regular","Regular","Res","Ret","Unconstrained","ap_update","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deserialize","dst_register","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fp_update","from","from","from","from","from","from","from","from","imm","into","into","into","into","into","into","into","into","off0","off1","off2","op0_register","op1_addr","opcode","pc_update","res","size","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Program","borrow","borrow_mut","builtins","clone","clone_into","constants","data","from","hints","identifiers","into","main","new","prime","reference_manager","to_owned","try_from","try_into","type_id","vzip","Int","MaybeRelocatable","Relocatable","RelocatableValue","add","add","add","add","add","add_int_mod","add_int_mod","add_maybe_mod","add_mod","add_usize_mod","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","divmod","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_int_ref","get_relocatable","hash","hash","into","into","mod_floor","offset","partial_cmp","partial_cmp","relocate_value","segment_index","sub","sub","sub_rel","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","vzip","vzip","0","0","from_relocatable_to_indexes","is_subsequence","to_field_element","context","decoding","errors","runners","trace","vm_core","vm_memory","run_context","RunContext","borrow","borrow_mut","compute_dst_addr","compute_op0_addr","compute_op1_addr","from","get_ap","get_fp","get_pc","into","try_from","try_into","type_id","vzip","decoder","decode_instruction","cairo_run_errors","exec_scope_errors","memory_errors","runner_errors","trace_errors","vm_errors","CairoRunError","Program","Runner","Trace","VirtualMachine","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","into","provide","source","to_string","try_from","try_into","type_id","vzip","0","0","0","0","ExecScopeError","ExitMainScopeError","NoScopeError","borrow","borrow_mut","eq","equivalent","fmt","fmt","from","hash","into","provide","to_string","try_from","try_into","type_id","vzip","AddressInTemporarySegment","AddressNotInTemporarySegment","AddressNotRelocatable","DuplicatedRelocation","EffectiveSizesNotCalled","FoundNonInt","InconsistentMemory","MemoryError","MissingAccessedAddresses","MissingSegmentUsedSizes","NonZeroOffset","NumOutOfBounds","Relocation","SegmentNotFinalized","UnallocatedSegment","WriteArg","borrow","borrow_mut","eq","fmt","fmt","from","into","provide","to_string","try_from","try_into","type_id","vzip","0","0","0","0","0","0","0","1","1","2","DisorderedBuiltins","EcOpBuiltinScalarLimit","EcOpSameXCoordinate","ExpectedInteger","FailedMemoryGet","FailedStringConversion","IntegerBiggerThanPowerOfTwo","MemoryGet","MemoryInitializationError","MemoryValidationError","MissingMain","NoAP","NoExecBase","NoExecBaseForEntrypoint","NoFP","NoPC","NoProgBase","NonRelocatableAddress","PointNotOnCurve","RunnerError","RunnerInTemporarySegment","UninitializedBase","WriteFail","borrow","borrow_mut","eq","fmt","fmt","from","into","provide","source","to_string","try_from","try_into","type_id","vzip","0","0","0","0","0","0","0","0","0","0","1","1","2","2","AlreadyRelocated","MemoryError","NoRelocationFound","RegNotRelocatable","TraceError","TraceNotEnabled","borrow","borrow_mut","eq","fmt","fmt","from","from","into","provide","source","to_string","try_from","try_into","type_id","vzip","0","AssertLtFelt","AssertNotEqualFail","AssertNotZero","AssertionFailed","BigintToU32Fail","BigintToU64Fail","BigintToUsizeFail","CantCreateDictionaryOnTakenSegment","CantSubOffset","CantWriteReturnFp","CantWriteReturnPc","CompileHintFail","CouldntPopPositions","CurrentAccessIndicesNotEmpty","CustomHint","DiffAssertValues","DiffIndexComp","DiffIndexSub","DiffTypeComparison","DividedByZero","EmptyAccessIndices","EmptyCurrentAccessIndices","EmptyKeys","ExpectedIntAtRange","ExpectedInteger","ExpectedRelocatable","FailedToComputeOperands","FailedToGetIds","FailedToGetSqrt","FindElemMaxSize","FixedSizeArrayFail","ImmShouldBe1","InconsistentAutoDeduction","InvalidApUpdate","InvalidApValue","InvalidBlockSize","InvalidHintEncoding","InvalidIndex","InvalidInstructionEncoding","InvalidKeccakInputLength","InvalidKeccakStateSizeFelts","InvalidOp1Reg","InvalidOpcode","InvalidPcUpdate","InvalidRes","InvalidSetRange","InvalidTrackingGroup","InvalidWordSize","KeccakMaxSize","KeyNotFound","KeysNotEmpty","LastPosNotFound","MainScopeError","MemoryError","MemoryGet","MismatchedDictPtr","MissingConstant","NAccessesTooBig","NoDictTracker","NoDst","NoImm","NoInitialDict","NoKeyInAccessIndices","NoRangeCheckBuiltin","NoRegisterInReference","NoValueForKey","NonLeFelt","NoneApTrackingData","NoneInMemoryRange","NotImplemented","NumUsedAccessesAssertFail","OffsetExceeded","OutOfValidRange","PositionsLengthNotZero","PositionsNotFound","PtrDiffNotDivisibleByDictAccessSize","PureValue","RelocatableAdd","RunNotFinished","RunnerError","SafeDivFail","ScopeError","SecpSplitNegative","SecpSplitutOfRange","SecpVerifyZero","SliceToArrayError","SplitIntLimbOutOfRange","SplitIntNotZero","SqrtNegative","SquashDictMaxSizeExceeded","UnconstrainedResAdd","UnconstrainedResAssertEq","UnconstrainedResJump","UnconstrainedResJumpRel","UnexpectedPositionsDictFail","UnknownHint","UnknownOp0","UsortOutOfRange","ValueNotPositive","ValueOutOfRange","ValueOutside250BitRange","ValueOutsideValidRange","VariableNotInScopeError","VirtualMachineError","WrongHintData","WrongPrevValue","borrow","borrow_mut","eq","fmt","fmt","from","from","from","from","into","provide","source","to_string","try_from","try_into","type_id","vzip","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","2","2","2","2","builtin_runner","cairo_runner","BitwiseBuiltinRunner","BuiltinRunner","EcOpBuiltinRunner","HashBuiltinRunner","OutputBuiltinRunner","RangeCheckBuiltinRunner","_bound","add_validation_rule","add_validation_rule","add_validation_rule","add_validation_rule","add_validation_rule","add_validation_rule","as_any","as_any","as_any","as_any","as_any","as_any","base","base","base","base","base","base","base","base","base","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deduce_memory_cell","deduce_memory_cell","deduce_memory_cell","deduce_memory_cell","deduce_memory_cell","deduce_memory_cell","default","from","from","from","from","from","get_memory_accesses","initial_stack","initial_stack","initial_stack","initial_stack","initial_stack","initial_stack","initialize_segments","initialize_segments","initialize_segments","initialize_segments","initialize_segments","initialize_segments","into","into","into","into","into","new","new","new","new","new","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","CairoRunner","borrow","borrow_mut","exec_scopes","from","get_constants","get_hint_data_dictionary","get_memory_holes","get_output","get_reference_list","initialize","into","mark_as_accessed","new","relocate","relocated_memory","relocated_trace","run_until_pc","try_from","try_into","type_id","vzip","write_output","trace_entry","RelocatedTraceEntry","TraceEntry","ap","ap","borrow","borrow","borrow_mut","borrow_mut","deserialize","eq","eq","fmt","fmt","fp","fp","from","from","into","into","pc","pc","relocate_trace_register","serialize","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","HintData","Operands","VirtualMachine","add_memory_segment","ap_tracking_data","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","disable_trace","eq","fmt","fmt","from","from","from","get_ap","get_builtin_runners","get_fp","get_integer","get_integer_range","get_maybe","get_pc","get_prime","get_range","get_range_check_builtin","get_relocatable","hint_code","ids","insert_value","into","into","into","load_data","new","new","step","step_hint","step_instruction","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify_auto_deductions","vzip","vzip","vzip","write_arg","memory","memory_segments","0","Memory","ValidationRule","add_relocation_rule","add_validation_rule","borrow","borrow","borrow_mut","borrow_mut","data","default","from","from","get_integer","get_integer_range","get_range","get_relocatable","insert","insert_value","into","into","new","relocate_value","relocation_rules","temp_data","try_from","try_from","try_into","try_into","type_id","type_id","validate_existing_memory","validated_addresses","validation_rules","vzip","vzip","MemorySegmentManager","add","add_temporary_segment","borrow","borrow_mut","compute_effective_sizes","default","from","gen_arg_vec_bigint","get_memory_holes","get_segment_size","get_segment_used_size","into","load_data","new","num_segments","num_temp_segments","relocate_segments","segment_sizes","segment_used_sizes","try_from","try_into","type_id","vzip","write_arg"],"q":["cairo_rs","","","","","","","","","","","cairo_rs::cairo_run","","","","cairo_rs::hint_processor","","","cairo_rs::hint_processor::builtin_hint_processor","","","","","","","","","","","","","","","","","","","","cairo_rs::hint_processor::builtin_hint_processor::blake2s_hash","","cairo_rs::hint_processor::builtin_hint_processor::blake2s_utils","","","","cairo_rs::hint_processor::builtin_hint_processor::builtin_hint_processor_definition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cairo_rs::hint_processor::builtin_hint_processor::cairo_keccak","cairo_rs::hint_processor::builtin_hint_processor::cairo_keccak::keccak_hints","","","","","cairo_rs::hint_processor::builtin_hint_processor::dict_hint_utils","","","","","","","","cairo_rs::hint_processor::builtin_hint_processor::dict_manager","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cairo_rs::hint_processor::builtin_hint_processor::dict_manager::Dictionary","","","cairo_rs::hint_processor::builtin_hint_processor::find_element_hint","","cairo_rs::hint_processor::builtin_hint_processor::hint_utils","","","","","","","cairo_rs::hint_processor::builtin_hint_processor::keccak_utils","","cairo_rs::hint_processor::builtin_hint_processor::math_utils","","","","","","","","","","","","","","","","cairo_rs::hint_processor::builtin_hint_processor::memcpy_hint_utils","","","","","cairo_rs::hint_processor::builtin_hint_processor::memset_utils","","cairo_rs::hint_processor::builtin_hint_processor::pow_utils","cairo_rs::hint_processor::builtin_hint_processor::secp","","","","","cairo_rs::hint_processor::builtin_hint_processor::secp::bigint_utils","","cairo_rs::hint_processor::builtin_hint_processor::secp::ec_utils","","","","","","","","cairo_rs::hint_processor::builtin_hint_processor::secp::field_utils","","","","","cairo_rs::hint_processor::builtin_hint_processor::secp::secp_utils","","","","","","","","","","","","","cairo_rs::hint_processor::builtin_hint_processor::secp::signature","","","cairo_rs::hint_processor::builtin_hint_processor::set","cairo_rs::hint_processor::builtin_hint_processor::sha256_utils","","","cairo_rs::hint_processor::builtin_hint_processor::squash_dict_utils","","","","","","","","","cairo_rs::hint_processor::builtin_hint_processor::uint256_utils","","","","","cairo_rs::hint_processor::builtin_hint_processor::usort","","","","","cairo_rs::hint_processor::hint_processor_definition","","","","","","","","","","","","","","","","","","","","","","","","","","","cairo_rs::hint_processor::hint_processor_utils","","","","","","cairo_rs::math_utils","","","","","","","","cairo_rs::serde","","cairo_rs::serde::deserialize_program","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cairo_rs::serde::deserialize_utils","","","","","","","","","","","","","","","","","","cairo_rs::serde::deserialize_utils::ReferenceParseError","","","cairo_rs::types","","","","","cairo_rs::types::errors","cairo_rs::types::errors::program_errors","","","","","","","","","","","","","","","","","","","","cairo_rs::types::errors::program_errors::ProgramError","","","","cairo_rs::types::exec_scope","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cairo_rs::types::instruction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cairo_rs::types::program","","","","","","","","","","","","","","","","","","","","","cairo_rs::types::relocatable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cairo_rs::types::relocatable::MaybeRelocatable","","cairo_rs::utils","","","cairo_rs::vm","","","","","","","cairo_rs::vm::context","cairo_rs::vm::context::run_context","","","","","","","","","","","","","","","cairo_rs::vm::decoding","cairo_rs::vm::decoding::decoder","cairo_rs::vm::errors","","","","","","cairo_rs::vm::errors::cairo_run_errors","","","","","","","","","","","","","","","","","","","","","","cairo_rs::vm::errors::cairo_run_errors::CairoRunError","","","","cairo_rs::vm::errors::exec_scope_errors","","","","","","","","","","","","","","","","","","cairo_rs::vm::errors::memory_errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cairo_rs::vm::errors::memory_errors::MemoryError","","","","","","","","","","cairo_rs::vm::errors::runner_errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cairo_rs::vm::errors::runner_errors::RunnerError","","","","","","","","","","","","","","cairo_rs::vm::errors::trace_errors","","","","","","","","","","","","","","","","","","","","","cairo_rs::vm::errors::trace_errors::TraceError","cairo_rs::vm::errors::vm_errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cairo_rs::vm::errors::vm_errors::VirtualMachineError","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cairo_rs::vm::runners","","cairo_rs::vm::runners::builtin_runner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cairo_rs::vm::runners::cairo_runner","","","","","","","","","","","","","","","","","","","","","","","cairo_rs::vm::trace","cairo_rs::vm::trace::trace_entry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cairo_rs::vm::vm_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cairo_rs::vm::vm_memory","","cairo_rs::vm::vm_memory::memory","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cairo_rs::vm::vm_memory::memory_segments","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","Writes a trace as a binary file. Bincode encodes to little …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Manages dictionaries in a Cairo program. Uses the segment …","Tracks the python dict associated with a Cairo dict.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Tries to convert a BigInt value to u32","","Computes the memory address of the ids variable indicated …","Returns the Integer value stored in the given ids variable","Returns the Relocatable value stored in the given ids …","Inserts value into the address of the given ids variable","Returns the lift of the given field element, val, as an …","Finds a nonnegative integer x &lt; p such that (m * x) % p == …","Gets two points on an elliptic curve mod p and returns …","Doubles a point on an elliptic curve with the equation y^2 …","Computes the slope of an elliptic curve with the equation …","Returns the integer square root of the nonnegative integer …","Computes the slope of the line connecting the two given EC …","Performs integer division between x and y; fails if x is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Creates or updates an existing variable given its name and …","","","","","Removes a variable from the current scope given its name","","","Returns the argument unchanged.","Returns the value in the current execution scope that …","Returns the value in the current execution scope that …","Returns the value in the dict manager","Returns the value in the current execution scope that …","Returns a reference to the value in the current execution …","Returns the value in the current execution scope that …","Returns a reference to the value in the current execution …","Returns the value in the current execution scope that …","Returns a reference to the value in the current execution …","Returns a dictionary containing the variables present in …","Returns a mutable reference to the dictionary containing …","Returns a mutable reference to the value in the current …","Returns a mutable reference to the value in the current …","Returns a mutable reference to the value in the current …","Returns a mutable reference to the value in the current …","Returns a mutable reference to the value in the current …","Returns the value in the current execution scope that …","Returns a reference to the value in the current execution …","Inserts the boxed value into the current scope","Inserts the value into the current scope","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Adds a bigint to self, then performs mod prime","Adds a bigint to self, then performs mod prime","Adds a MaybeRelocatable to self, then performs mod prime …","Adds a MaybeRelocatable to self, then performs mod prime …","Adds a usize to self, then performs mod prime if prime is …","","","","","","","","","Performs integer division and module on a …","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Performs mod floor for a MaybeRelocatable::Int with BigInt","","","","Turns a MaybeRelocatable into a BigInt value If the value …","","","Substracts two MaybeRelocatable values and returns the …","","","","","","","","","","","","","","","","","","Converts val to an integer in the range (-prime/2, …","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","Decodes an instruction. The encoding is little endian, so …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the builtin’s base segment (offset is always …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Creates the necessary segments for the builtin in the …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Gets the data used by the HintProcessor to execute each …","Count the number of holes present in the segments.","","","","Calls <code>U::from(self)</code>.","Mark a memory address as accesed.","","","","","","","","","","Writes the values hosted in the output builtin’s segment …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Adds a new segment and to the VirtualMachine.memory …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the vector with all builtins …","","Gets the integer value corresponding to the Relocatable …","Gets n integer values from memory starting from addr (n …","Gets a MaybeRelocatable value from memory indicated by a …","","","Gets n elements from memory starting from addr (n being …","","Gets the relocatable value corresponding to the …","","","Inserts a value into a memory address given by a …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Writes data into the memory at address ptr and returns the …","","","","","","","","","","","","","","","","Makes sure that all assigned memory cells are consistent …","","","","Perfroms modulo on each element","","","","","","Add a new relocation rule.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Inserts an MaybeRelocatable value into an address given by …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Relocate a value according to the relocation rules.","","","","","","","","","Applies validation_rules to the current memory","","","","","","Adds a new segment and returns its starting location as a …","Adds a new temporary segment and returns its starting …","","","Calculates the size (number of non-none elements) of each …","","Returns the argument unchanged.","","","","Returns the number of used segments when they are already …","Calls <code>U::from(self)</code>.","Writes data into the memory at address ptr and returns the …","","","","Returns a vector that contains the first relocated address …","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,15,22,22,17,15,22,17,15,22,15,15,15,22,17,15,22,22,17,15,15,22,15,22,17,15,22,17,15,22,17,15,22,17,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,26,24,25,26,24,25,26,24,25,26,24,25,26,25,25,24,24,25,26,24,25,26,24,25,26,25,24,24,25,25,24,25,26,24,24,25,24,25,25,24,25,26,24,24,25,26,24,25,26,24,25,26,24,25,26,87,88,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,21,21,21,21,21,4,21,21,4,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,38,42,44,37,38,13,39,40,41,42,43,44,37,38,13,39,40,41,42,43,44,40,37,38,13,39,40,41,42,43,37,38,13,39,40,41,42,43,37,44,13,43,44,37,38,13,39,40,41,42,43,0,0,0,0,0,0,37,38,13,39,40,41,42,43,37,44,37,38,13,39,40,41,42,43,44,37,38,13,39,40,41,42,43,39,13,44,44,43,43,44,37,38,13,39,40,41,42,43,39,13,43,13,40,43,43,39,42,44,38,44,41,43,37,38,13,39,40,41,42,43,44,37,38,13,39,40,41,42,43,44,37,38,13,39,40,41,42,43,39,44,37,38,13,39,40,41,42,43,39,42,43,44,37,38,13,39,40,41,42,43,48,48,48,0,48,48,48,48,48,48,48,0,0,48,48,48,48,48,89,90,91,0,0,0,0,0,0,47,47,47,47,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,92,93,94,95,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,58,60,64,61,63,63,63,0,65,65,64,58,60,0,60,0,62,62,62,61,65,60,61,0,0,0,0,62,63,64,0,65,61,59,58,59,60,61,62,63,64,65,58,59,60,61,62,63,64,65,58,58,58,59,58,59,60,61,62,63,64,65,58,59,60,61,62,63,64,65,59,58,59,60,61,62,63,64,65,59,58,59,60,61,62,63,64,65,59,59,59,59,59,59,59,59,59,58,58,59,60,61,62,63,64,65,58,59,60,61,62,63,64,65,58,59,60,61,62,63,64,65,58,59,60,61,62,63,64,65,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,32,0,0,32,30,30,30,30,30,30,32,30,32,32,30,32,30,32,30,32,30,32,32,30,32,30,32,30,32,30,30,30,32,32,32,32,32,32,32,32,32,30,32,30,32,32,30,30,32,0,30,30,32,30,30,32,30,30,32,30,32,32,30,32,30,32,96,97,0,0,0,0,0,0,0,0,0,0,0,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,98,99,100,101,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,67,67,67,67,67,67,67,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,102,103,104,105,106,107,108,102,103,103,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,109,110,111,112,113,114,115,116,117,118,116,117,116,117,70,70,70,70,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,119,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,123,124,125,129,136,137,143,144,145,148,150,156,157,158,159,162,163,164,166,167,170,174,175,129,158,162,163,0,0,0,0,0,0,0,0,77,184,73,74,75,76,77,184,73,74,75,76,77,184,73,74,75,76,77,73,74,75,73,74,75,76,77,73,74,75,76,77,184,73,74,75,76,77,76,73,74,75,76,77,184,184,73,74,75,76,77,184,73,74,75,76,77,73,74,75,76,77,73,74,75,76,77,73,74,75,76,77,73,74,75,76,77,73,74,75,76,77,73,74,75,76,77,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,82,81,82,81,82,81,81,82,81,82,81,82,81,82,81,82,81,82,81,0,81,82,81,82,81,82,81,82,81,0,0,0,9,83,9,84,83,9,84,83,83,83,9,84,84,83,9,84,83,9,9,9,9,9,9,9,9,9,9,9,83,83,9,9,84,83,9,9,83,9,9,9,83,9,84,83,9,84,83,9,84,83,9,9,84,83,9,0,0,85,0,0,72,72,85,72,85,72,72,72,85,72,72,72,72,72,72,72,85,72,72,72,72,72,85,72,85,72,85,72,72,72,72,85,72,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79],"f":[0,0,0,0,0,0,0,0,0,0,0,[[1,2,3,3,4],[[7,[5,6]]]],[1,8],[1,8],[[5,9],[[7,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[10,10,10,10],[[11,[10]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],0,0,0,0,[[15,16,17]],0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[15,2,13,12,12],[[7,[[19,[18]],14]]]],[[15,9,20,19,12],[[7,[14]]]],0,[[]],[[]],[[]],0,[[]],[[]],[[]],[[[12,[16,17]]],15],[[16,[12,[16,21]]],22],[[],15],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],23],[[],23],[[],23],[[]],[[]],[[]],0,[[9,12,13,12],[[7,[14]]]],[[9,12,13,12],[[7,[14]]]],[[9,12,13,12],[[7,[14]]]],[[9,12,13,12],[[7,[14]]]],[[9,12,13],[[7,[14]]]],0,[[9,20,12,13],[[7,[14]]]],[[9,20],[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[24,24],[25,25],[26,26],[[]],[[]],[[]],0,0,[[],24],[[24,24],3],[[25,25],3],[[26,26],3],[[24,27],28],[[25,27],28],[[26,27],28],[[]],[[]],[[]],[25,[[12,[29,29]]]],[[24,30],[[7,[25,14]]]],[[24,30],[[7,[25,14]]]],[[25,29],[[7,[29,14]]]],[[25,29,29]],[[]],[[]],[[]],[[],24],[[24,9,29,[31,[[12,[29,29]]]]],[[7,[32,14]]]],[[30,29,[31,[[12,[29,29]]]]],25],[[24,9,[12,[29,29]]],[[7,[32,14]]]],[30,25],[[30,[12,[29,29]]],25],[[]],[[]],[[]],0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],23],[[],23],[[],23],[[]],[[]],[[]],0,0,0,[[9,20,12,13],[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[[2,9,12,13],[[7,[32,14]]]],[[2,9,12,13],[[7,[[33,[29]],14]]]],[[2,9,12,13],[[7,[30,14]]]],[[2,12],[[7,[21,14]]]],[[2,9,12,13],[[7,[30,14]]]],[[2,[34,[32]],9,12,13],[[7,[14]]]],[[9,[34,[32]]],[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[9,[[7,[14]]]],[20,[[7,[14]]]],[20,[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],0,0,0,0,0,[[9,12,13,12],[[7,[14]]]],[[9,20,12,13,12],[[7,[14]]]],[[9,20,12,13,12],[[7,[14]]]],[[9,20,12,13,12],[[7,[14]]]],[[9,20,12,13,12],[[7,[14]]]],[[20,12],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,20,12,13,12],[[7,[14]]]],[[9,20,12,13,12],[[7,[14]]]],[[20,12],[[7,[14]]]],[[20,12],[[7,[14]]]],[[9,20],[[7,[14]]]],[[9,20,12,13,12],[[7,[14]]]],[[9,20,12,13,12],[[7,[14]]]],[[9,12,13,12],[[7,[14]]]],0,0,0,0,0,0,0,0,0,[[29,29,29,29],29],[[30,9],[[7,[29,14]]]],[[2,9,12,13],[[7,[29,14]]]],[[29,12],[[7,[14]]]],[[9,20,12,13,12],[[7,[14]]]],[[20,12],[[7,[14]]]],[[9,20,12,13,12],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[20,[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[20,[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,12,13],[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[20,[[7,[14]]]],[20,[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],[[9,20,12,13],[[7,[14]]]],0,0,0,[[]],[[]],0,[21,21],[[]],[[2,13,12,12],[[7,[[19,[18]],14]]]],0,[[21,21],3],[[9,20,19,12],[[7,[14]]]],[[21,27],28],[[]],0,0,[[]],[[35,35,3,3],21],[35,21],0,0,0,[[]],[[],7],[[],7],[[],23],[[]],[29,[[7,[10,14]]]],[29,[[7,[36,14]]]],[[21,9,13],[[7,[30,14]]]],[[9,21,13],[[7,[[33,[29]],14]]]],[[9,21,13],[[7,[30,14]]]],[[[34,[32]],9,21,13],[[7,[14]]]],[[29,29],29],[[29,29,29],29],[29],[[29,29]],[[29,29],29],[29,[[7,[29,14]]]],[29,29],[[29,29],[[7,[29,14]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[37,37],[38,38],[13,13],[39,39],[40,40],[41,41],[42,42],[43,43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],13],0,[[],[[7,[44]]]],[[],[[7,[37]]]],[[],[[7,[38]]]],[[],[[7,[13]]]],[[],[[7,[39]]]],[[],[[7,[40]]]],[[],[[7,[41]]]],[[],[[7,[42]]]],[[],[[7,[43]]]],[45,[[7,[[11,[32]]]]]],[45,[[7,[29]]]],[45,[[7,[[12,[16,36]]]]]],[[1,2],[[7,[46,47]]]],[1,[[7,[44,47]]]],[45,[[7,[43]]]],[[37,37],3],[[38,38],3],[[13,13],3],[[39,39],3],[[40,40],3],[[41,41],3],[[42,42],3],[[43,43],3],0,[[44,27],28],[[37,27],28],[[38,27],28],[[13,27],28],[[39,27],28],[[40,27],28],[[41,27],28],[[42,27],28],[[43,27],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],13],[[],43],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[48,48],3],[[48,27],28],[[48,27],28],[[]],[[]],[16,16],[2,[[49,[2,43]]]],[[],16],[[],7],[[],7],[[],23],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[47,27],28],[[47,27],28],[50,47],[51,47],[[]],[[]],[52],[47,[[31,[53]]]],[[],16],[[],7],[[],7],[[],23],[[]],0,0,0,0,0,[[20,2,[19,[18]]]],[[]],[[]],0,[[],20],[[20,2]],[[20,[12,[16,[19,[18]]]]]],[20,[[7,[54]]]],[[]],[[20,2],[[7,[19,14]]]],[[20,2],[[7,[19,14]]]],[20,[[7,[[56,[[55,[24]]]],14]]]],[[20,2],[[7,[29,14]]]],[[20,2],[[7,[29,14]]]],[[20,2],[[7,[[11,[29]],14]]]],[[20,2],[[7,[11,14]]]],[[20,2],[[7,[[11,[57]],14]]]],[[20,2],[[7,[11,14]]]],[20,[[7,[12,14]]]],[20,[[7,[12,14]]]],[[20,2],[[7,[12,14]]]],[[20,2],[[7,[29,14]]]],[[20,2],[[7,[11,14]]]],[[20,2],[[7,[11,14]]]],[[20,2],[[7,[57,14]]]],[[20,2],[[7,[57,14]]]],[[20,2],[[7,[57,14]]]],[[20,2,[19,[18]]]],[[20,2]],[[]],[[],20],[[],7],[[],7],[[],23],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[58,58],[[]],[[],[[7,[58]]]],0,[[58,58],3],[[59,59],3],[[60,60],3],[[61,61],3],[[62,62],3],[[63,63],3],[[64,64],3],[[65,65],3],[[58,27],28],[[59,27],28],[[60,27],28],[[61,27],28],[[62,27],28],[[63,27],28],[[64,27],28],[[65,27],28],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[59,36],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],0,[46,46],[[]],0,0,[[]],0,0,[[]],0,[[1,2],[[7,[46,47]]]],0,0,[[]],[[],7],[[],7],[[],23],[[]],0,0,0,0,[[30,36],30],[[30,35],30],[[30,35],30],[[30,36]],[[30,36],[[7,[30,14]]]],[[30,29,29],[[7,[30,14]]]],[[32,29,29],[[7,[32,14]]]],[[30,32,29],[[7,[30,14]]]],[[32,32,29],[[7,[32,14]]]],[[32,36,[31,[29]]],32],[[]],[[]],[[]],[[]],[30,30],[32,32],[[]],[[]],[[32,32],[[7,[14]]]],[[30,30],3],[[32,32],3],[[],3],[[],3],[[30,27],28],[[32,27],28],[[],30],[[]],[30,30],[29,32],[[]],[32,32],[30,32],[30,32],[29,32],[[],32],[32,[[7,[29,14]]]],[32,[[7,[30,14]]]],[30],[32],[[]],[[]],[[32,29],[[7,[32,14]]]],0,[[30,30],[[31,[66]]]],[[32,32],[[31,[66]]]],[[32,11],[[7,[29,67]]]],0,[[30,36],[[7,[30,14]]]],[[32,32,29],[[7,[32,14]]]],[[30,30],[[7,[36,14]]]],[[]],[[]],[32,[[7,[30,67]]]],[[],7],[[],7],[[],7],[32,[[7,[30,67]]]],[[],7],[[],23],[[],23],[[]],[[]],0,0,[30],[[],3],[[29,29],29],0,0,0,0,0,0,0,0,0,[[]],[[]],[[68,59],[[7,[30,14]]]],[[68,59],[[7,[30,14]]]],[[68,59,[31,[32]]],[[7,[30,14]]]],[[]],[68,30],[68,30],[68,30],[[]],[[],7],[[],7],[[],23],[[]],0,[[69,[31,[29]]],[[7,[59,14]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[6,27],28],[[6,27],28],[47,6],[[]],[14,6],[70,6],[71,6],[[]],[52],[6,[[31,[53]]]],[[],16],[[],7],[[],7],[[],23],[[]],0,0,0,0,0,0,0,[[]],[[]],[[54,54],3],[[],3],[[54,27],28],[[54,27],28],[[]],[54],[[]],[52],[[],16],[[],7],[[],7],[[],23],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[67,67],3],[[67,27],28],[[67,27],28],[[]],[[]],[52],[[],16],[[],7],[[],7],[[],23],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[71,71],3],[[71,27],28],[[71,27],28],[[]],[[]],[52],[71,[[31,[53]]]],[[],16],[[],7],[[],7],[[],23],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[70,70],3],[[70,27],28],[[70,27],28],[67,70],[[]],[[]],[52],[70,[[31,[53]]]],[[],16],[[],7],[[],7],[[],23],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[14,14],3],[[14,27],28],[[14,27],28],[54,14],[71,14],[67,14],[[]],[[]],[52],[14,[[31,[53]]]],[[],16],[[],7],[[],7],[[],23],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[72,[[7,[71]]]],[[73,72],[[7,[71]]]],[[74,72],[[7,[71]]]],[[75,72],[[7,[71]]]],[[76,72],[[7,[71]]]],[[77,72],[[7,[71]]]],[[],18],[73,18],[74,18],[75,18],[76,18],[77,18],[[],78],[73,78],[74,78],[75,78],[76,78],[77,78],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[30,72],[[7,[[31,[32]],71]]]],[[73,30,72],[[7,[[31,[32]],71]]]],[[74,30,72],[[7,[[31,[32]],71]]]],[[75,30,72],[[7,[[31,[32]],71]]]],[[76,30,72],[[7,[[31,[32]],71]]]],[[77,30,72],[[7,[[31,[32]],71]]]],[[],76],[[]],[[]],[[]],[[]],[[]],[9,[[7,[[11,[30]],67]]]],[[],[[11,[32]]]],[73,[[11,[32]]]],[74,[[11,[32]]]],[75,[[11,[32]]]],[76,[[11,[32]]]],[77,[[11,[32]]]],[[79,72]],[[73,79,72]],[[74,79,72]],[[75,79,72]],[[76,79,72]],[[77,79,72]],[[]],[[]],[[]],[[]],[[]],[36,73],[36,74],[36,75],[[],76],[[29,10],77],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],23],[[],23],[[],23],[[],23],[[],23],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],0,[[]],[5,12],[[5,12,4],[[7,[[12,[36,[11,[[19,[18]]]]]],14]]]],[[5,9],[[7,[36,67]]]],[[5,9],[[7,[[31,[16]],71]]]],[5,[[12,[36,21]]]],[[5,9],[[7,[30,71]]]],[[]],[[5,30,36],[[7,[14]]]],[46,[[7,[5,71]]]],[[5,9],[[7,[70]]]],0,0,[[5,30,9,4],[[7,[14]]]],[[],7],[[],7],[[],23],[[]],[[5,9,80],[[7,[71]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[],[[7,[81]]]],[[82,82],3],[[81,81],3],[[82,27],28],[[81,27],28],0,0,[[]],[[]],[[]],[[]],0,0,[[30,11],[[7,[36,70]]]],[81,7],[[],7],[[],7],[[],7],[[],7],[[],23],[[],23],[[]],[[]],0,0,0,[9,30],0,[[]],[[]],[[]],[[]],[[]],[[]],[83,83],[[]],[9],[[84,84],3],[[84,27],28],[[83,27],28],[[]],[[]],[[]],[9,30],[9,11],[9,30],[[9,30],[[7,[[33,[29]],14]]]],[[9,30,36],[[7,[[11,[[33,[29]]]],14]]]],[9,[[7,[[31,[32]],67]]]],[9,30],[9,29],[[9,32,36],[[7,[[11,[[31,[[33,[32]]]]]],67]]]],[9,[[7,[77,14]]]],[[9,30],[[7,[[33,[30]],14]]]],0,0,[[9,30,[34,[32]]],[[7,[14]]]],[[]],[[]],[[]],[[9,32,[11,[32]]],[[7,[32,67]]]],[[29,3],9],[[2,[12,[16,36]],13],83],[[9,4,20,12,12],[[7,[14]]]],[[9,4,20,12,12],[[7,[14]]]],[9,[[7,[14]]]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],23],[[],23],[[],23],[9,[[7,[14]]]],[[]],[[]],[[]],[[9,30,18],[[7,[32,67]]]],0,0,0,0,0,[[72,30,30],[[7,[67]]]],[[72,36,85]],[[]],[[]],[[]],[[]],0,[[],72],[[]],[[]],[[72,30],[[7,[[33,[29]],14]]]],[[72,30,36],[[7,[[11,[[33,[29]]]],14]]]],[[72,32,36],[[7,[[11,[[31,[[33,[32]]]]]],67]]]],[[72,30],[[7,[[33,[30]],14]]]],[72,[[7,[67]]]],[[72,30,[34,[32]]],[[7,[14]]]],[[]],[[]],[[],72],[[72,[31,[[33,[32]]]]],[[7,[[31,[[33,[32]]]],67]]]],0,0,[[],7],[[],7],[[],7],[[],7],[[],23],[[],23],[72,[[7,[67]]]],0,0,[[]],[[]],0,[[79,72],30],[[79,72],30],[[]],[[]],[[79,72]],[[],79],[[]],[[79,[31,[29]]],[[11,[32]]]],[[79,86],[[7,[36,67]]]],[[79,36],[[31,[36]]]],[[79,36],[[31,[36]]]],[[]],[[79,72,32,[11,[32]]],[[7,[32,67]]]],[[],79],0,0,[79,[[7,[[11,[36]],67]]]],0,0,[[],7],[[],7],[[],23],[[]],[[79,72,30,18,[31,[29]]],[[7,[32,67]]]]],"p":[[3,"Path"],[15,"str"],[15,"bool"],[8,"HintProcessor"],[3,"CairoRunner"],[4,"CairoRunError"],[4,"Result"],[6,"Result"],[3,"VirtualMachine"],[15,"u32"],[3,"Vec"],[3,"HashMap"],[3,"ApTracking"],[4,"VirtualMachineError"],[3,"BuiltinHintProcessor"],[3,"String"],[3,"HintFunc"],[8,"Any"],[3,"Box"],[3,"ExecutionScopes"],[3,"HintReference"],[3,"HintProcessorData"],[3,"TypeId"],[3,"DictManager"],[3,"DictTracker"],[4,"Dictionary"],[3,"Formatter"],[6,"Result"],[3,"BigInt"],[3,"Relocatable"],[4,"Option"],[4,"MaybeRelocatable"],[4,"Cow"],[8,"Into"],[15,"i32"],[15,"usize"],[3,"HintParams"],[3,"FlowTrackingData"],[3,"Identifier"],[3,"Member"],[3,"ReferenceManager"],[3,"Reference"],[3,"ValueAddress"],[3,"ProgramJson"],[8,"Deserializer"],[3,"Program"],[4,"ProgramError"],[4,"ReferenceParseError"],[6,"IResult"],[3,"Error"],[3,"Error"],[3,"Demand"],[8,"Error"],[4,"ExecScopeError"],[3,"RefCell"],[3,"Rc"],[15,"u64"],[4,"Register"],[3,"Instruction"],[4,"Op1Addr"],[4,"Res"],[4,"PcUpdate"],[4,"ApUpdate"],[4,"FpUpdate"],[4,"Opcode"],[4,"Ordering"],[4,"MemoryError"],[3,"RunContext"],[15,"i64"],[4,"TraceError"],[4,"RunnerError"],[3,"Memory"],[3,"BitwiseBuiltinRunner"],[3,"EcOpBuiltinRunner"],[3,"HashBuiltinRunner"],[3,"OutputBuiltinRunner"],[3,"RangeCheckBuiltinRunner"],[15,"isize"],[3,"MemorySegmentManager"],[8,"Write"],[3,"RelocatedTraceEntry"],[3,"TraceEntry"],[3,"HintData"],[3,"Operands"],[3,"ValidationRule"],[3,"HashSet"],[13,"SimpleDictionary"],[13,"DefaultDictionary"],[13,"IntError"],[13,"BigIntError"],[13,"InvalidStringError"],[13,"IO"],[13,"Parse"],[13,"EntrypointNotFound"],[13,"ConstWithoutValue"],[13,"RelocatableValue"],[13,"Int"],[13,"Program"],[13,"VirtualMachine"],[13,"Trace"],[13,"Runner"],[13,"UnallocatedSegment"],[13,"InconsistentMemory"],[13,"AddressInTemporarySegment"],[13,"AddressNotInTemporarySegment"],[13,"NonZeroOffset"],[13,"DuplicatedRelocation"],[13,"SegmentNotFinalized"],[13,"MemoryValidationError"],[13,"MemoryInitializationError"],[13,"RunnerInTemporarySegment"],[13,"ExpectedInteger"],[13,"MemoryGet"],[13,"FailedMemoryGet"],[13,"EcOpBuiltinScalarLimit"],[13,"IntegerBiggerThanPowerOfTwo"],[13,"EcOpSameXCoordinate"],[13,"PointNotOnCurve"],[13,"MemoryError"],[13,"InvalidOp1Reg"],[13,"InvalidApUpdate"],[13,"InvalidPcUpdate"],[13,"DiffAssertValues"],[13,"CantWriteReturnPc"],[13,"CantWriteReturnFp"],[13,"InvalidRes"],[13,"InvalidOpcode"],[13,"OffsetExceeded"],[13,"InconsistentAutoDeduction"],[13,"RunnerError"],[13,"InvalidHintEncoding"],[13,"MemoryError"],[13,"MemoryGet"],[13,"ExpectedInteger"],[13,"ExpectedRelocatable"],[13,"NonLeFelt"],[13,"OutOfValidRange"],[13,"ValueOutOfRange"],[13,"ValueNotPositive"],[13,"UnknownHint"],[13,"ValueOutsideValidRange"],[13,"SplitIntLimbOutOfRange"],[13,"DiffTypeComparison"],[13,"AssertNotEqualFail"],[13,"DiffIndexComp"],[13,"ValueOutside250BitRange"],[13,"SqrtNegative"],[13,"SafeDivFail"],[13,"FailedToGetSqrt"],[13,"AssertNotZero"],[13,"MainScopeError"],[13,"VariableNotInScopeError"],[13,"CantCreateDictionaryOnTakenSegment"],[13,"NoDictTracker"],[13,"NoValueForKey"],[13,"AssertLtFelt"],[13,"FindElemMaxSize"],[13,"InvalidIndex"],[13,"InvalidTrackingGroup"],[13,"InvalidApValue"],[13,"NoKeyInAccessIndices"],[13,"WrongPrevValue"],[13,"NumUsedAccessesAssertFail"],[13,"SquashDictMaxSizeExceeded"],[13,"NAccessesTooBig"],[13,"UsortOutOfRange"],[13,"InvalidSetRange"],[13,"FixedSizeArrayFail"],[13,"AssertionFailed"],[13,"MismatchedDictPtr"],[13,"SecpSplitNegative"],[13,"SecpSplitutOfRange"],[13,"SecpVerifyZero"],[13,"CantSubOffset"],[13,"KeccakMaxSize"],[13,"InvalidWordSize"],[13,"InvalidKeccakInputLength"],[13,"ExpectedIntAtRange"],[13,"InvalidKeccakStateSizeFelts"],[13,"InvalidBlockSize"],[13,"CompileHintFail"],[13,"CustomHint"],[13,"MissingConstant"],[8,"BuiltinRunner"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
